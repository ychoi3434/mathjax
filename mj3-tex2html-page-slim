#! /usr/bin/env node

/*************************************************************************
 *
 *  mj3-tex2html-page-slim
 *
 *  Uses MathJax v3 to convert all TeX in an HTML document.
 *
 * ----------------------------------------------------------------------
 *
 *  Copyright (c) 2018 The MathJax Consortium
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

//
//  Get the command-line arguments
//
var argv = require('yargs')
  .demand(1).strict()
  .usage('$0 [options] file.html > converted.html')
  .options({
    em: {
      default: 16,
      describe: 'em-size in pixels'
    },
    ex: {
      default: 8,
      describe: 'ex-size in pixels'
    },
    packages: {
      default: 'base, ams, noundefined, newcommand, boldsymbol',
      describe: 'the packages to use, e.g. "base, ams"'
    },
    fontURL: {
      default: 'https://cdn.rawgit.com/mathjax/mathjax-v3/3.0.0-beta.1/mathjax2/css',
      describe: 'the URL to use for web fonts'
    }
  })
  .argv;

const fs = require('fs');

//
//  Load the packages needed for MathJax
//
const MathJax = require('mathjax3/mathjax3/mathjax.js').MathJax;
const TeX = require('mathjax3/mathjax3/input/tex.js').TeX;
const CHTML = require('mathjax3/mathjax3/output/chtml.js').CHTML;

require('mathjax3/mathjax3/input/tex/base/BaseConfiguration.js');
require('mathjax3/mathjax3/input/tex/ams/AmsConfiguration.js');
require('mathjax3/mathjax3/input/tex/noundefined/NoUndefinedConfiguration.js');
require('mathjax3/mathjax3/input/tex/newcommand/NewcommandConfiguration.js');
require('mathjax3/mathjax3/input/tex/boldsymbol/BoldsymbolConfiguration.js');

//
// Create the slim CSS font
//
const SlimTeXFont = require('./lib/slim-css.js');
const slimFont = new SlimTeXFont({fontURL: argv.fontURL});

//
//  Create DOM adaptor and register it for HTML documents
//
const adaptor = require('mathjax3/mathjax3/adaptors/liteAdaptor.js').liteAdaptor({fontSize: argv.em});
require('mathjax3/mathjax3/handlers/html.js').RegisterHTMLHandler(adaptor);

//
//  Work around bug in liteAdaptor (https://github.com/mathjax/mathjax-v3/issues/127).
//  This will be fixed in the next release.
//
//  Alternatively, install jsdom (npm install jsdom) and use the jsdomAdaptor above instead
//
const LiteParser = require('mathjax3/mathjax3/adaptors/lite/Parser.js').LiteParser;
class myParser extends LiteParser {
    serializeInner(adaptor, node) {
       if (LiteParser.PCDATA.hasOwnProperty(node.kind)) {
         return node.children.map(x => x.value).join('');
       }
       return super.serializeInner(adaptor, node);
    }
}
adaptor.parser = new myParser();

//
//  Read the HTML file
//
const htmlfile = fs.readFileSync(argv._[0], 'utf8');

//
//  Create input and output jax and a document using them on the content from the HTML file
//
const tex = new TeX({packages: argv.packages.split(/\s*,\s*/)});
const chtml = new CHTML({font: slimFont, exFactor: argv.ex / argv.em});
const html = MathJax.document(htmlfile, {InputJax: tex, OutputJax: chtml});

//
//  Typeset the document
//
html.findMath()
    .compile()
    .getMetrics()
    .typeset()
    .updateDocument();

//
//  Output the resulting HTML and fix the &gt; in the style elements (liteAdaptor bug);
//
console.log(adaptor.outerHTML(adaptor.parent(adaptor.body(html.document))));
